{"version":3,"sources":["TopForm/index.js","REcharts/index.js","Menu/index.js","App/App.js","serviceWorker.js","index.js"],"names":["TextArea","InputBar","props","setDate","date","dateString","setState","setHIndex","e","hIndex","Number","target","value","setSIndex","sIndex","setNote","note","split","submit","JSON","parse","stringify","state","moment","format","layout","Item","placeholder","defaultValue","onChange","this","prefix","type","className","autoSize","onClick","React","Component","TopForm","create","name","REchats","_renderChart","echarts_react","getEchartsInstance","setOption","getOption","onChartClick","params","obj","localStorage","chartData","dataIndex","notification","open","message","placement","description","join","onRef","arr","grid","top","left","right","bottom","tooltip","trigger","axisPointer","label","show","legend","data","dataZoom","xAxis","map","yAxis","min","max","series","yAxisIndex","onEvents","click","echarts","ref","option","style","height","width","LeftMenu","importData","myRef","current","handleCancel","success","showModal","visible","createRef","ClipboardJS","on","shape","title","onCancel","footer","id","data-clipboard-text","rows","App","child","renderChart","beforeData","push","href","rel","data-ribbon","REcharts","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.481eb17b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport moment from \"moment\";\r\nimport { Form, DatePicker, Icon, Input, Button } from \"antd\";\r\nimport \"./index.less\";\r\nconst { TextArea } = Input;\r\n\r\nclass InputBar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      date: moment().format(\"YYYY-MM-DD\"), // antd需要传入moment对象\r\n      hIndex: 0,\r\n      sIndex: 0,\r\n      note: []\r\n    };\r\n  }\r\n\r\n  setDate = (date, dateString) => this.setState({ date: dateString });\r\n\r\n  setHIndex = e => this.setState({ hIndex: Number(e.target.value) });\r\n\r\n  setSIndex = e => this.setState({ sIndex: Number(e.target.value) });\r\n\r\n  setNote = e => this.setState({ note: e.target.value.split(\"\\n\") });\r\n\r\n  // 提交数据，子 => 父传值\r\n  submit = () => this.props.submit(JSON.parse(JSON.stringify(this.state)));\r\n\r\n  render() {\r\n    return (\r\n      <Form layout=\"inline\">\r\n        <Form.Item>\r\n          <DatePicker\r\n            placeholder=\"选择日期\"\r\n            defaultValue={moment()}\r\n            onChange={this.setDate}\r\n          />\r\n        </Form.Item>\r\n        <Form.Item>\r\n          <Input\r\n            prefix={<Icon type=\"line-chart\" />}\r\n            className=\"indexInput\"\r\n            placeholder=\"健康指数\"\r\n            onChange={this.setHIndex}\r\n          />\r\n        </Form.Item>\r\n        <Form.Item>\r\n          <Input\r\n            prefix={<Icon type=\"line-chart\" />}\r\n            className=\"indexInput\"\r\n            placeholder=\"睡眠指数\"\r\n            onChange={this.setSIndex}\r\n          />\r\n        </Form.Item>\r\n        <Form.Item>\r\n          <TextArea\r\n            placeholder=\"备注\"\r\n            prefix={<Icon type=\"form\" />}\r\n            autoSize\r\n            className=\"note\"\r\n            onChange={this.setNote}\r\n          />\r\n        </Form.Item>\r\n        <Form.Item>\r\n          <Button type=\"primary\" onClick={this.submit}>\r\n            +1\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nconst TopForm = Form.create({ name: \"myInputs\" })(InputBar);\r\n\r\nexport default TopForm;\r\n","import React from \"react\";\r\n// 对于 echarts-for-react 进行按需引入\r\n// import the core library.\r\nimport ReactEchartsCore from \"echarts-for-react/lib/core\";\r\n// then import echarts modules those you have used manually.\r\nimport echarts from \"echarts/lib/echarts\";\r\nimport \"echarts/lib/chart/line\";\r\nimport 'echarts/lib/component/tooltip';\r\nimport 'echarts/lib/component/legend';\r\nimport 'echarts/lib/component/dataZoom';\r\nimport 'echarts/lib/component/grid';\r\nimport { notification } from \"antd\";\r\n\r\nclass REchats extends React.Component {\r\n  componentDidMount() {\r\n    this.props.onRef(this);\r\n  }\r\n  getOption() {\r\n    let arr = JSON.parse(localStorage.chartData);\r\n    return {\r\n      grid: {\r\n        top: 50,\r\n        left: 30,\r\n        right: 30,\r\n        bottom: 90\r\n      },\r\n      tooltip: {\r\n        trigger: \"axis\",\r\n        axisPointer: {\r\n          type: \"shadow\",\r\n          label: {\r\n            show: true\r\n          }\r\n        }\r\n      },\r\n      legend: {\r\n        data: [\"健康指数\", \"睡眠指数\"],\r\n        bottom: 0\r\n      },\r\n      dataZoom: [\r\n        {\r\n          show: true,\r\n          bottom: 30\r\n        }\r\n      ],\r\n      xAxis: {\r\n        data: arr.map(obj => obj.date)\r\n      },\r\n      yAxis: [\r\n        {\r\n          type: \"value\",\r\n          name: \"健康指数\",\r\n          min: 0,\r\n          max: 100\r\n        },\r\n        {\r\n          type: \"value\",\r\n          name: \"睡眠指数\",\r\n          min: 0,\r\n          max: 100\r\n        }\r\n      ],\r\n      series: [\r\n        {\r\n          name: \"健康指数\",\r\n          type: \"line\",\r\n          yAxisIndex: 0,\r\n          data: arr.map(obj => obj.hIndex)\r\n        },\r\n        {\r\n          name: \"睡眠指数\",\r\n          type: \"line\",\r\n          yAxisIndex: 1,\r\n          data: arr.map(obj => obj.sIndex)\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  _renderChart = () => {\r\n    this.echarts_react.getEchartsInstance().setOption(this.getOption());\r\n  };\r\n\r\n  // 点击折线图上的折点，获取当前天的备注数组\r\n  onChartClick = params => {\r\n    let obj = JSON.parse(localStorage.chartData)[params.dataIndex];\r\n    notification.open({\r\n      message: `${obj.date} Notes`,\r\n      placement: \"bottomRight\",\r\n      description: obj.note.join(\"；\")\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let onEvents = {\r\n      click: this.onChartClick\r\n    };\r\n    return (\r\n      <div>\r\n        <ReactEchartsCore\r\n          echarts={echarts}\r\n          ref={e => {\r\n            this.echarts_react = e;\r\n          }}\r\n          option={this.getOption()}\r\n          style={{ height: \"480px\", width: \"100%\" }}\r\n          className=\"react_for_echarts\"\r\n          onEvents={onEvents}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default REchats;\r\n","import React from \"react\";\r\nimport { Input, Modal, Icon, Button, message } from \"antd\";\r\nimport \"./index.less\";\r\nimport ClipboardJS from \"clipboard\";\r\nconst { TextArea } = Input;\r\n\r\nclass LeftMenu extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      visible: false\r\n    };\r\n    this.myRef = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    // 初始化粘贴板\r\n    var clipboard = new ClipboardJS(\"#exportBtn\");\r\n    clipboard.on(\"success\", function(e) {\r\n      message.success(\"复制成功！\");\r\n    });\r\n  }\r\n\r\n  importData = () => {\r\n    localStorage.chartData = this.myRef.current.state.value;\r\n    this.handleCancel();\r\n    message.success(\"导入成功，请刷新页面！\");\r\n  };\r\n\r\n  showModal = () => this.setState({ visible: true });\r\n\r\n  handleCancel = e => this.setState({ visible: false });\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        {/* 菜单按钮 */}\r\n        <Button\r\n          type=\"primary\"\r\n          shape=\"circle\"\r\n          onClick={this.showModal}\r\n          className=\"myMenu\"\r\n        >\r\n          <Icon type=\"menu\" />\r\n        </Button>\r\n\r\n        {/* 弹出框 */}\r\n        <Modal\r\n          title=\"导入/导出 数据\"\r\n          visible={this.state.visible}\r\n          onCancel={this.handleCancel}\r\n          footer={null}\r\n        >\r\n          <Button\r\n            type=\"primary\"\r\n            id=\"exportBtn\"\r\n            data-clipboard-text={localStorage.chartData}\r\n          >\r\n            导出数据到剪切板\r\n          </Button>\r\n          <TextArea\r\n            rows={4}\r\n            placeholder=\"在这里粘贴导出的数据\"\r\n            ref={this.myRef}\r\n          />\r\n          <Button type=\"primary\" onClick={this.importData}>\r\n            导入\r\n          </Button>\r\n        </Modal>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LeftMenu;\r\n","import React from \"react\";\nimport \"./App.less\";\nimport TopForm from \"@/TopForm\";\nimport REcharts from \"@/REcharts\";\nimport LeftMenu from \"@/Menu\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    if (!localStorage.chartData) localStorage.chartData = JSON.stringify([]);\n  }\n\n  onRef = ref => {\n    this.child = ref;\n  };\n\n  renderChart = obj => {\n    let beforeData = JSON.parse(localStorage.chartData);\n    beforeData.push(obj);\n    localStorage.chartData = JSON.stringify(beforeData);\n    this.child._renderChart();\n  };\n\n  render() {\n    return (\n      <div className=\"wrap\">\n        {/* 引入github丝带 */}\n        <a\n          className=\"github-fork-ribbon\"\n          href=\"https://github.com/JasonBai007/keeper\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          data-ribbon=\"Fork me on GitHub\"\n        >\n          github-fork-ribbon\n        </a>\n        <LeftMenu></LeftMenu>\n        <h2>\n          Keeper <span>一天一记录，仨月大变样</span>\n        </h2>\n        <TopForm submit={this.renderChart}></TopForm>\n        <REcharts onRef={this.onRef}></REcharts>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.less';\nimport App from './App/App.js';\n// eslint-disable-next-line\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}